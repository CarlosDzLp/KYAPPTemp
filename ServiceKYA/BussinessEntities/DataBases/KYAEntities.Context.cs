//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BussinessEntities.DataBases
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RentAppEntities : DbContext
    {
        public RentAppEntities()
            : base("name=RentAppEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int spDelDocument(Nullable<System.Guid> idDocument)
        {
            var idDocumentParameter = idDocument.HasValue ?
                new ObjectParameter("IdDocument", idDocument) :
                new ObjectParameter("IdDocument", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDelDocument", idDocumentParameter);
        }
    
        public virtual int spDelOwner(Nullable<System.Guid> idOwner)
        {
            var idOwnerParameter = idOwner.HasValue ?
                new ObjectParameter("IdOwner", idOwner) :
                new ObjectParameter("IdOwner", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDelOwner", idOwnerParameter);
        }
    
        public virtual int spDelRoom(Nullable<System.Guid> idRoom)
        {
            var idRoomParameter = idRoom.HasValue ?
                new ObjectParameter("IdRoom", idRoom) :
                new ObjectParameter("IdRoom", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDelRoom", idRoomParameter);
        }
    
        public virtual int spDelService(Nullable<System.Guid> idService)
        {
            var idServiceParameter = idService.HasValue ?
                new ObjectParameter("IdService", idService) :
                new ObjectParameter("IdService", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDelService", idServiceParameter);
        }
    
        public virtual int spDelUser(Nullable<System.Guid> idUser)
        {
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("IdUser", idUser) :
                new ObjectParameter("IdUser", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDelUser", idUserParameter);
        }
    
        public virtual int spInsDocument(Nullable<System.Guid> idOwner, Nullable<System.Guid> idAdmin, string name, byte[] fileDocument, string stringFile, string extensions)
        {
            var idOwnerParameter = idOwner.HasValue ?
                new ObjectParameter("IdOwner", idOwner) :
                new ObjectParameter("IdOwner", typeof(System.Guid));
    
            var idAdminParameter = idAdmin.HasValue ?
                new ObjectParameter("IdAdmin", idAdmin) :
                new ObjectParameter("IdAdmin", typeof(System.Guid));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var fileDocumentParameter = fileDocument != null ?
                new ObjectParameter("FileDocument", fileDocument) :
                new ObjectParameter("FileDocument", typeof(byte[]));
    
            var stringFileParameter = stringFile != null ?
                new ObjectParameter("StringFile", stringFile) :
                new ObjectParameter("StringFile", typeof(string));
    
            var extensionsParameter = extensions != null ?
                new ObjectParameter("Extensions", extensions) :
                new ObjectParameter("Extensions", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsDocument", idOwnerParameter, idAdminParameter, nameParameter, fileDocumentParameter, stringFileParameter, extensionsParameter);
        }
    
        public virtual int spInsNotifications(Nullable<System.Guid> id, string playerId, string pushToken, Nullable<int> typeUser)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var playerIdParameter = playerId != null ?
                new ObjectParameter("PlayerId", playerId) :
                new ObjectParameter("PlayerId", typeof(string));
    
            var pushTokenParameter = pushToken != null ?
                new ObjectParameter("PushToken", pushToken) :
                new ObjectParameter("PushToken", typeof(string));
    
            var typeUserParameter = typeUser.HasValue ?
                new ObjectParameter("TypeUser", typeUser) :
                new ObjectParameter("TypeUser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsNotifications", idParameter, playerIdParameter, pushTokenParameter, typeUserParameter);
        }
    
        public virtual int spInsOwner(Nullable<System.Guid> idAdmin, string name, string address, string phone, string user, byte[] icon, string iconSitrng, string password)
        {
            var idAdminParameter = idAdmin.HasValue ?
                new ObjectParameter("IdAdmin", idAdmin) :
                new ObjectParameter("IdAdmin", typeof(System.Guid));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var iconParameter = icon != null ?
                new ObjectParameter("Icon", icon) :
                new ObjectParameter("Icon", typeof(byte[]));
    
            var iconSitrngParameter = iconSitrng != null ?
                new ObjectParameter("IconSitrng", iconSitrng) :
                new ObjectParameter("IconSitrng", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsOwner", idAdminParameter, nameParameter, addressParameter, phoneParameter, userParameter, iconParameter, iconSitrngParameter, passwordParameter);
        }
    
        public virtual int spInsRoom(Nullable<System.Guid> idOwner, Nullable<System.Guid> idAdmin, string name, Nullable<decimal> price)
        {
            var idOwnerParameter = idOwner.HasValue ?
                new ObjectParameter("IdOwner", idOwner) :
                new ObjectParameter("IdOwner", typeof(System.Guid));
    
            var idAdminParameter = idAdmin.HasValue ?
                new ObjectParameter("IdAdmin", idAdmin) :
                new ObjectParameter("IdAdmin", typeof(System.Guid));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsRoom", idOwnerParameter, idAdminParameter, nameParameter, priceParameter);
        }
    
        public virtual int spInsService(Nullable<System.Guid> idOwner, Nullable<System.Guid> idAdmin, string name, Nullable<decimal> price, byte[] icon, string iconString)
        {
            var idOwnerParameter = idOwner.HasValue ?
                new ObjectParameter("IdOwner", idOwner) :
                new ObjectParameter("IdOwner", typeof(System.Guid));
    
            var idAdminParameter = idAdmin.HasValue ?
                new ObjectParameter("IdAdmin", idAdmin) :
                new ObjectParameter("IdAdmin", typeof(System.Guid));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var iconParameter = icon != null ?
                new ObjectParameter("Icon", icon) :
                new ObjectParameter("Icon", typeof(byte[]));
    
            var iconStringParameter = iconString != null ?
                new ObjectParameter("IconString", iconString) :
                new ObjectParameter("IconString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsService", idOwnerParameter, idAdminParameter, nameParameter, priceParameter, iconParameter, iconStringParameter);
        }
    
        public virtual int spInsUser(Nullable<System.Guid> idOwner, Nullable<System.Guid> idAdmin, string name, string address, string phone, string user, string password, byte[] icon, string iconString)
        {
            var idOwnerParameter = idOwner.HasValue ?
                new ObjectParameter("IdOwner", idOwner) :
                new ObjectParameter("IdOwner", typeof(System.Guid));
    
            var idAdminParameter = idAdmin.HasValue ?
                new ObjectParameter("IdAdmin", idAdmin) :
                new ObjectParameter("IdAdmin", typeof(System.Guid));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var iconParameter = icon != null ?
                new ObjectParameter("Icon", icon) :
                new ObjectParameter("Icon", typeof(byte[]));
    
            var iconStringParameter = iconString != null ?
                new ObjectParameter("IconString", iconString) :
                new ObjectParameter("IconString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsUser", idOwnerParameter, idAdminParameter, nameParameter, addressParameter, phoneParameter, userParameter, passwordParameter, iconParameter, iconStringParameter);
        }
    
        public virtual ObjectResult<spSelAdministratorDoLogin_Result> spSelAdministratorDoLogin(string user, string password)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelAdministratorDoLogin_Result>("spSelAdministratorDoLogin", userParameter, passwordParameter);
        }
    
        public virtual ObjectResult<spSelDocuments_Result> spSelDocuments(Nullable<System.Guid> idOwner)
        {
            var idOwnerParameter = idOwner.HasValue ?
                new ObjectParameter("IdOwner", idOwner) :
                new ObjectParameter("IdOwner", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelDocuments_Result>("spSelDocuments", idOwnerParameter);
        }
    
        public virtual ObjectResult<spSelNotifications_Result> spSelNotifications(Nullable<System.Guid> id, Nullable<int> typeUser)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var typeUserParameter = typeUser.HasValue ?
                new ObjectParameter("TypeUser", typeUser) :
                new ObjectParameter("TypeUser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelNotifications_Result>("spSelNotifications", idParameter, typeUserParameter);
        }
    
        public virtual ObjectResult<spSelOwner_Result> spSelOwner()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelOwner_Result>("spSelOwner");
        }
    
        public virtual ObjectResult<spSelOwnerDoLogin_Result> spSelOwnerDoLogin(string user, string password)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelOwnerDoLogin_Result>("spSelOwnerDoLogin", userParameter, passwordParameter);
        }
    
        public virtual ObjectResult<spSelRoom_Result> spSelRoom(Nullable<System.Guid> idOwner, Nullable<bool> statusRoom)
        {
            var idOwnerParameter = idOwner.HasValue ?
                new ObjectParameter("IdOwner", idOwner) :
                new ObjectParameter("IdOwner", typeof(System.Guid));
    
            var statusRoomParameter = statusRoom.HasValue ?
                new ObjectParameter("StatusRoom", statusRoom) :
                new ObjectParameter("StatusRoom", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelRoom_Result>("spSelRoom", idOwnerParameter, statusRoomParameter);
        }
    
        public virtual ObjectResult<spSelService_Result> spSelService(Nullable<System.Guid> idOwner, Nullable<bool> statusService)
        {
            var idOwnerParameter = idOwner.HasValue ?
                new ObjectParameter("IdOwner", idOwner) :
                new ObjectParameter("IdOwner", typeof(System.Guid));
    
            var statusServiceParameter = statusService.HasValue ?
                new ObjectParameter("StatusService", statusService) :
                new ObjectParameter("StatusService", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelService_Result>("spSelService", idOwnerParameter, statusServiceParameter);
        }
    
        public virtual ObjectResult<spSelUser_Result> spSelUser(Nullable<System.Guid> idOwner)
        {
            var idOwnerParameter = idOwner.HasValue ?
                new ObjectParameter("IdOwner", idOwner) :
                new ObjectParameter("IdOwner", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelUser_Result>("spSelUser", idOwnerParameter);
        }
    
        public virtual ObjectResult<spSelUserDoLogin_Result> spSelUserDoLogin(string user, string password)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelUserDoLogin_Result>("spSelUserDoLogin", userParameter, passwordParameter);
        }
    
        public virtual int spUpdDocument(Nullable<System.Guid> idDocument, Nullable<System.Guid> idOwner, Nullable<System.Guid> idAdmin, string name, byte[] fileDocument, string stringFile, string extensions)
        {
            var idDocumentParameter = idDocument.HasValue ?
                new ObjectParameter("IdDocument", idDocument) :
                new ObjectParameter("IdDocument", typeof(System.Guid));
    
            var idOwnerParameter = idOwner.HasValue ?
                new ObjectParameter("IdOwner", idOwner) :
                new ObjectParameter("IdOwner", typeof(System.Guid));
    
            var idAdminParameter = idAdmin.HasValue ?
                new ObjectParameter("IdAdmin", idAdmin) :
                new ObjectParameter("IdAdmin", typeof(System.Guid));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var fileDocumentParameter = fileDocument != null ?
                new ObjectParameter("FileDocument", fileDocument) :
                new ObjectParameter("FileDocument", typeof(byte[]));
    
            var stringFileParameter = stringFile != null ?
                new ObjectParameter("StringFile", stringFile) :
                new ObjectParameter("StringFile", typeof(string));
    
            var extensionsParameter = extensions != null ?
                new ObjectParameter("Extensions", extensions) :
                new ObjectParameter("Extensions", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdDocument", idDocumentParameter, idOwnerParameter, idAdminParameter, nameParameter, fileDocumentParameter, stringFileParameter, extensionsParameter);
        }
    
        public virtual int spUpdOwner(Nullable<System.Guid> idOwner, string name, string address, string phone, string user, byte[] icon, string iconSitrng, string password, Nullable<bool> status)
        {
            var idOwnerParameter = idOwner.HasValue ?
                new ObjectParameter("IdOwner", idOwner) :
                new ObjectParameter("IdOwner", typeof(System.Guid));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var iconParameter = icon != null ?
                new ObjectParameter("Icon", icon) :
                new ObjectParameter("Icon", typeof(byte[]));
    
            var iconSitrngParameter = iconSitrng != null ?
                new ObjectParameter("IconSitrng", iconSitrng) :
                new ObjectParameter("IconSitrng", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdOwner", idOwnerParameter, nameParameter, addressParameter, phoneParameter, userParameter, iconParameter, iconSitrngParameter, passwordParameter, statusParameter);
        }
    
        public virtual int spUpdRoom(Nullable<System.Guid> idRoom, Nullable<System.Guid> idOwner, Nullable<System.Guid> idAdmin, string name, Nullable<decimal> price)
        {
            var idRoomParameter = idRoom.HasValue ?
                new ObjectParameter("IdRoom", idRoom) :
                new ObjectParameter("IdRoom", typeof(System.Guid));
    
            var idOwnerParameter = idOwner.HasValue ?
                new ObjectParameter("IdOwner", idOwner) :
                new ObjectParameter("IdOwner", typeof(System.Guid));
    
            var idAdminParameter = idAdmin.HasValue ?
                new ObjectParameter("IdAdmin", idAdmin) :
                new ObjectParameter("IdAdmin", typeof(System.Guid));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdRoom", idRoomParameter, idOwnerParameter, idAdminParameter, nameParameter, priceParameter);
        }
    
        public virtual int spUpdService(Nullable<System.Guid> idService, Nullable<System.Guid> idOwner, Nullable<System.Guid> idAdmin, string name, Nullable<decimal> price, byte[] icon, string iconString)
        {
            var idServiceParameter = idService.HasValue ?
                new ObjectParameter("IdService", idService) :
                new ObjectParameter("IdService", typeof(System.Guid));
    
            var idOwnerParameter = idOwner.HasValue ?
                new ObjectParameter("IdOwner", idOwner) :
                new ObjectParameter("IdOwner", typeof(System.Guid));
    
            var idAdminParameter = idAdmin.HasValue ?
                new ObjectParameter("IdAdmin", idAdmin) :
                new ObjectParameter("IdAdmin", typeof(System.Guid));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var iconParameter = icon != null ?
                new ObjectParameter("Icon", icon) :
                new ObjectParameter("Icon", typeof(byte[]));
    
            var iconStringParameter = iconString != null ?
                new ObjectParameter("IconString", iconString) :
                new ObjectParameter("IconString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdService", idServiceParameter, idOwnerParameter, idAdminParameter, nameParameter, priceParameter, iconParameter, iconStringParameter);
        }
    
        public virtual int spUpdUser(Nullable<System.Guid> userID, Nullable<System.Guid> idOwner, Nullable<System.Guid> idAdmin, string name, string address, string phone, string user, string password, byte[] icon, string iconString, Nullable<bool> statusUser)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(System.Guid));
    
            var idOwnerParameter = idOwner.HasValue ?
                new ObjectParameter("IdOwner", idOwner) :
                new ObjectParameter("IdOwner", typeof(System.Guid));
    
            var idAdminParameter = idAdmin.HasValue ?
                new ObjectParameter("IdAdmin", idAdmin) :
                new ObjectParameter("IdAdmin", typeof(System.Guid));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var iconParameter = icon != null ?
                new ObjectParameter("Icon", icon) :
                new ObjectParameter("Icon", typeof(byte[]));
    
            var iconStringParameter = iconString != null ?
                new ObjectParameter("IconString", iconString) :
                new ObjectParameter("IconString", typeof(string));
    
            var statusUserParameter = statusUser.HasValue ?
                new ObjectParameter("StatusUser", statusUser) :
                new ObjectParameter("StatusUser", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdUser", userIDParameter, idOwnerParameter, idAdminParameter, nameParameter, addressParameter, phoneParameter, userParameter, passwordParameter, iconParameter, iconStringParameter, statusUserParameter);
        }
    }
}
